apiVersion: v1
kind: Template
labels:
  template: kitchensink-pipeline
metadata:
  name: kitchensink-pipeline
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      build: ${PIPELINE_NAME}
    name: ${PIPELINE_NAME}
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "ks-test", "namespace": "${KS_TEST_PROJECT}", "kind": "BuildConfig"},{"name": "ks-test", "namespace": "${KS_TEST_PROJECT}", "kind": "DeploymentConfig"},{"name": "ks-staging", "namespace": "${KS_STAGING_PROJECT}", "kind": "DeploymentConfig"},{"name": "ks-green", "namespace": "${KS_PROD_PROJECT}", "kind": "DeploymentConfig"},{"name": "ks-blue", "namespace": "${KS_PROD_PROJECT}", "kind": "DeploymentConfig"}]'
  spec:
    runPolicy: Serial
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node ('maven') {
            stage ('Build') {
              openshiftBuild(buildConfig: 'ks-test', namespace: '${KS_TEST_PROJECT}', showBuildLogs: 'true')
              openshiftTag(sourceStream: 'ks', sourceTag: 'latest', namespace: '${KS_TEST_PROJECT}', destinationStream: 'ks', destinationTag: 'test', destinationNamespace: '${KS_TEST_PROJECT}')
            }
            
            stage ('Run Tests in TEST') {
              sleep 10
            }

            stage ('Deploy to STAGING') {
              openshiftTag(sourceStream: 'ks', sourceTag: 'latest', namespace: '${KS_TEST_PROJECT}', destinationStream: 'ks', destinationTag: 'staging', destinationNamespace: '${KS_STAGING_PROJECT}')
              sleep 10
            }

            stage ('Run Tests in STAGING') {          
              sleep 30
            }
          }

          def tag="blue"
          def altTag="green"

          node {
            stage ('Deploy to PROD (Not Live)') {
              sh "oc get route ks-prod -n ${KS_PROD_PROJECT} -o jsonpath='{ .spec.to.name }' > activeservice"
              activeService = readFile('activeservice').trim()
              if (activeService == "ks-blue") {
                tag = "green"
                altTag = "blue"
              }
              openshiftTag(sourceStream: 'ks', sourceTag: 'staging', namespace: '${KS_STAGING_PROJECT}', destinationStream: 'ks', destinationTag: "prod-${tag}", destinationNamespace: '${KS_PROD_PROJECT}')
              sleep 10
              openshiftVerifyDeployment(deploymentConfig: "ks-${tag}", replicaCount: 1, verifyReplicaCount: true, namespace: '${KS_PROD_PROJECT}')
            }
            
            stage ('Smoke Tests in PROD (Not Live)') {
              sleep 30
            }
          }

          stage ('Approve Go Live') {
            timeout(time:30, unit:'MINUTES') {
              input message:'Go Live in Production (switch to new version)?'
            }
          }

          node {
            stage ('Go Live') {
              sh "oc set route-backends ks-prod ks-${tag}=100 ks-${altTag}=0 -n ${KS_PROD_PROJECT}"
              sh "oc label svc ks-${altTag} app=ks-idle --overwrite -n ${KS_PROD_PROJECT}"
              sh "oc label svc ks-${tag} app=ks-live --overwrite -n ${KS_PROD_PROJECT}"
              sleep 5
            }
          }
      type: JenkinsPipeline
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic
parameters:
- description: The name for the pipeline.
  displayName: Pipeline Name
  name: PIPELINE_NAME
  required: true
  value: ks-pipeline
- description: TEST Project name containing the buildconfigs
  displayName: TEST Project Name
  name: KS_TEST_PROJECT
  required: true
- description: STAGING Project name containing the buildconfigs
  displayName: STAGING Project Name
  name: KS_STAGING_PROJECT
  required: true
- description: PROD Project name containing the buildconfigs
  displayName: PROD Project Name
  name: KS_PROD_PROJECT
  required: true
- description: GitHub webhook secret
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{10}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
  required: true
- description: Generic webhook secret
  displayName: Generic Webhook Secret
  from: '[a-zA-Z0-9]{10}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
  required: true